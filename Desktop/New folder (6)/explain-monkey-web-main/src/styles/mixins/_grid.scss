/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-font-size($breakpoints: $grid-breakpoints) {
  @for $i from 5 through 60 {
    $dimension: $i;
    .font-size-#{$dimension} {
      font-size: #{$dimension}px;
    }
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        .font-size#{$infix}-#{$dimension} {
          font-size: #{$dimension}px;
        }
      }
    }
  }
}

@mixin make-line-height($breakpoints: $grid-breakpoints) {
  @for $i from 5 through 60 {
    $dimension: $i;
    .line-height-#{$dimension} {
      line-height: #{$dimension}px;
    }
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        .line-height#{$infix}-#{$dimension} {
          line-height: #{$dimension}px;
        }
      }
    }
  }
}

@mixin make-border() {
  @for $i from 0 through 4 {
    $dimension: $i;
    .border-#{$dimension} {
      border: #{$dimension}px solid;
    }
    .border-top-#{$dimension} {
      border-top: #{$dimension}px solid;
    }
    .border-bottom-#{$dimension} {
      border-bottom: #{$dimension}px solid;
    }
    .border-left-#{$dimension} {
      border-left: #{$dimension}px solid;
    }
    .border-right-#{$dimension} {
      border-right: #{$dimension}px solid;
    }
  }
}

@mixin make-border-round() {
  @for $i from 0 through 40 {
    $dimension: 2 * $i;
    .border-radius-#{$dimension} {
      border-radius: #{$dimension}px;
    }
    .border-top-radius-#{$dimension} {
      border-top-left-radius: #{$dimension}px;
      border-top-right-radius: #{$dimension}px;
    }
    .border-bottom-radius-#{$dimension} {
      border-bottom-left-radius: #{$dimension}px;
      border-bottom-right-radius: #{$dimension}px;
    }
    .border-top-left-radius-#{$dimension} {
      border-top-left-radius: #{$dimension}px;
    }
    .border-top-right-radius-#{$dimension} {
      border-top-right-radius: #{$dimension}px;
    }
    .border-bottom-left-radius-#{$dimension} {
      border-bottom-left-radius: #{$dimension}px;
    }
    .border-bottom-right-radius-#{$dimension} {
      border-bottom-right-radius: #{$dimension}px;
    }
  }
}

@mixin make-padding($breakpoints: $grid-breakpoints) {
  @for $i from 0 through 100 {
    $dimension: $i * 2;
    .padding-#{$dimension} {
      padding: #{$dimension}px;
    }
    .padding-right-#{$dimension} {
      padding-right: #{$dimension}px;
    }
    .padding-left-#{$dimension} {
      padding-left: #{$dimension}px;
    }
    .padding-top-#{$dimension} {
      padding-top: #{$dimension}px;
    }
    .padding-bottom-#{$dimension} {
      padding-bottom: #{$dimension}px;
    }
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        .padding#{$infix}-#{$dimension} {
          padding: #{$dimension}px;
        }
        .padding-left#{$infix}-#{$dimension} {
          padding-left: #{$dimension}px;
        }
        .padding-right#{$infix}-#{$dimension} {
          padding-right: #{$dimension}px;
        }
        .padding-top#{$infix}-#{$dimension} {
          padding-top: #{$dimension}px;
        }
        .padding-bottom#{$infix}-#{$dimension} {
          padding-bottom: #{$dimension}px;
        }
      }
    }
  }
}

@mixin make-margin($breakpoints: $grid-breakpoints) {
  @for $i from 0 through 100 {
    $dimension: $i * 2;
    .margin-#{$dimension} {
      margin: #{$dimension}px;
    }
    .margin-right-#{$dimension} {
      margin-right: #{$dimension}px;
    }
    .margin-left-#{$dimension} {
      margin-left: #{$dimension}px;
    }
    .margin-top-#{$dimension} {
      margin-top: #{$dimension}px;
    }
    .margin-bottom-#{$dimension} {
      margin-bottom: #{$dimension}px;
    }
    @each $breakpoint in map-keys($breakpoints) {
      $infix: breakpoint-infix($breakpoint, $breakpoints);
      @include media-breakpoint-up($breakpoint, $breakpoints) {
        .margin#{$infix}-#{$dimension} {
          margin: #{$dimension}px;
        }
        .margin-left#{$infix}-#{$dimension} {
          margin-left: #{$dimension}px;
        }
        .margin-right#{$infix}-#{$dimension} {
          margin-right: #{$dimension}px;
        }
        .margin-top#{$infix}-#{$dimension} {
          margin-top: #{$dimension}px;
        }
        .margin-bottom#{$infix}-#{$dimension} {
          margin-bottom: #{$dimension}px;
        }
      }
    }
  }
}

@mixin make-stretch-full($breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-down($breakpoint, $breakpoints) {
      .stretch-full#{$infix} {
        flex: 1;
        width: 100%;
        max-width: 100%;
      }
    }
  }
}

@mixin make-hidden($breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .hidden#{$infix} {
      display: none;
    }
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .hidden#{$infix} {
        display: none;
      }
    }
  }
}

@mixin make-hidden-d-flex($breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .d-flex-hidden#{$infix} {
      display: none;
    }
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .d-flex-hidden#{$infix} {
        display: flex;
      }
    }
  }
}

@mixin make-hidden-d-block($breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .d-block-hidden#{$infix} {
      display: none;
    }
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .d-block-hidden#{$infix} {
        display: block;
      }
    }
  }
}

@mixin make-hidden-row($breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);
    .row-hidden#{$infix} {
      display: none;
    }
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      .row-hidden#{$infix} {
        display: flex;
      }
    }
  }
}

@mixin make-row($gutter: 1.5rem) {
  // --#{$variable-prefix}gutter-x: #{$gutter};
  // --#{$variable-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;
  // margin-top: calc(var(--#{$variable-prefix}gutter-y) * -1); // stylelint-disable-line function-disallowed-list
  // margin-right: calc(var(--#{$variable-prefix}gutter-x) / -2); // stylelint-disable-line function-disallowed-list
  // margin-left: calc(var(--#{$variable-prefix}gutter-x) / -2); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready($gutter: 1.5rem) {
  // Add box sizing if only the grid is loaded
  // box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  // padding-right: calc(var(--#{$variable-prefix}gutter-x) / 2); // stylelint-disable-line function-disallowed-list
  // padding-left: calc(var(--#{$variable-prefix}gutter-x) / 2); // stylelint-disable-line function-disallowed-list
  // margin-top: var(--#{$variable-prefix}gutter-y);
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 auto;
  width: percentage($size / $columns);
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  > * {
    flex: 0 0 auto;
    width: 100% / $count;
  }
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto > * {
        @include make-col-auto();
      }

      @if $grid-row-columns > 0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns > 0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not($infix == "" and $i == 0) {
            // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $key, $value in $gutters {
        .g#{$infix}-#{$key},
        .gx#{$infix}-#{$key} {
          --#{$variable-prefix}gutter-x: #{$value};
        }

        .g#{$infix}-#{$key},
        .gy#{$infix}-#{$key} {
          --#{$variable-prefix}gutter-y: #{$value};
        }
      }
    }
  }
}
